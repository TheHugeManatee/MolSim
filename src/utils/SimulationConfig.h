// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from simulationConfig.xsd.
 */

#ifndef SIMULATION_CONFIG_H
#define SIMULATION_CONFIG_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class BoundaryConditionType;
class OutputFileType;
class ScenarioType;
class ContainerType;
class FloatVector;
class IntVector;
class Cuboid;
class Generator;
class SimulationConfig;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

/**
 * @brief Enumeration class corresponding to the %BoundaryConditionType
 * schema type.
 */
class BoundaryConditionType: public ::xml_schema::String
{
  public:

  /**
   * @brief Underlying enum type.
   */
  enum Value
  {
    Outflow,
    Reflect,
    Periodic
  };

  /**
   * @brief Create an instance from the underlying enum value.
   *
   * @param v A enum value.
   */
  BoundaryConditionType (Value v);

  /**
   * @brief Create an instance from a C string.
   *
   * @param v A string value.
   */
  BoundaryConditionType (const char* v);

  /**
   * @brief Create an instance from a string.
   *
   * @param v A string value.
   */
  BoundaryConditionType (const ::std::string& v);

  /**
   * @brief Create an instance from the base value.
   *
   * @param v A base value.
   */
  BoundaryConditionType (const ::xml_schema::String& v);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  BoundaryConditionType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a DOM attribute.
   *
   * @param a A DOM attribute to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  BoundaryConditionType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a string fragment.
   *
   * @param s A string fragment to extract the data from.
   * @param e A pointer to DOM element containing the string fragment.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  BoundaryConditionType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  BoundaryConditionType (const BoundaryConditionType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual BoundaryConditionType*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Assign the underlying enum value.
   *
   * @param v A enum value.
   * @return A refernce to the instance.
   */
  BoundaryConditionType&
  operator= (Value v);

  /**
   * @brief Implicit conversion operator to the underlying
   * enum value.
   *
   * @return A enum value.
   */
  virtual
  operator Value () const
  {
    return _xsd_BoundaryConditionType_convert ();
  }

  //@cond

  protected:
  Value
  _xsd_BoundaryConditionType_convert () const;

  public:
  static const char* const _xsd_BoundaryConditionType_literals_[3];
  static const Value _xsd_BoundaryConditionType_indexes_[3];

  //@endcond
};

/**
 * @brief Enumeration class corresponding to the %OutputFileType
 * schema type.
 */
class OutputFileType: public ::xml_schema::String
{
  public:

  /**
   * @brief Underlying enum type.
   */
  enum Value
  {
    xyz,
    vtk
  };

  /**
   * @brief Create an instance from the underlying enum value.
   *
   * @param v A enum value.
   */
  OutputFileType (Value v);

  /**
   * @brief Create an instance from a C string.
   *
   * @param v A string value.
   */
  OutputFileType (const char* v);

  /**
   * @brief Create an instance from a string.
   *
   * @param v A string value.
   */
  OutputFileType (const ::std::string& v);

  /**
   * @brief Create an instance from the base value.
   *
   * @param v A base value.
   */
  OutputFileType (const ::xml_schema::String& v);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  OutputFileType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a DOM attribute.
   *
   * @param a A DOM attribute to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  OutputFileType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a string fragment.
   *
   * @param s A string fragment to extract the data from.
   * @param e A pointer to DOM element containing the string fragment.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  OutputFileType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  OutputFileType (const OutputFileType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual OutputFileType*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Assign the underlying enum value.
   *
   * @param v A enum value.
   * @return A refernce to the instance.
   */
  OutputFileType&
  operator= (Value v);

  /**
   * @brief Implicit conversion operator to the underlying
   * enum value.
   *
   * @return A enum value.
   */
  virtual
  operator Value () const
  {
    return _xsd_OutputFileType_convert ();
  }

  //@cond

  protected:
  Value
  _xsd_OutputFileType_convert () const;

  public:
  static const char* const _xsd_OutputFileType_literals_[2];
  static const Value _xsd_OutputFileType_indexes_[2];

  //@endcond
};

/**
 * @brief Enumeration class corresponding to the %ScenarioType
 * schema type.
 */
class ScenarioType: public ::xml_schema::String
{
  public:

  /**
   * @brief Underlying enum type.
   */
  enum Value
  {
    Gravity,
    Lennard_Jones
  };

  /**
   * @brief Create an instance from the underlying enum value.
   *
   * @param v A enum value.
   */
  ScenarioType (Value v);

  /**
   * @brief Create an instance from a C string.
   *
   * @param v A string value.
   */
  ScenarioType (const char* v);

  /**
   * @brief Create an instance from a string.
   *
   * @param v A string value.
   */
  ScenarioType (const ::std::string& v);

  /**
   * @brief Create an instance from the base value.
   *
   * @param v A base value.
   */
  ScenarioType (const ::xml_schema::String& v);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ScenarioType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a DOM attribute.
   *
   * @param a A DOM attribute to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ScenarioType (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a string fragment.
   *
   * @param s A string fragment to extract the data from.
   * @param e A pointer to DOM element containing the string fragment.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ScenarioType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  ScenarioType (const ScenarioType& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual ScenarioType*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Assign the underlying enum value.
   *
   * @param v A enum value.
   * @return A refernce to the instance.
   */
  ScenarioType&
  operator= (Value v);

  /**
   * @brief Implicit conversion operator to the underlying
   * enum value.
   *
   * @return A enum value.
   */
  virtual
  operator Value () const
  {
    return _xsd_ScenarioType_convert ();
  }

  //@cond

  protected:
  Value
  _xsd_ScenarioType_convert () const;

  public:
  static const char* const _xsd_ScenarioType_literals_[2];
  static const Value _xsd_ScenarioType_indexes_[2];

  //@endcond
};

/**
 * @brief Enumeration class corresponding to the %ContainerType
 * schema type.
 */
class ContainerType: public ::xml_schema::String
{
  public:

  /**
   * @brief Underlying enum type.
   */
  enum Value
  {
    ParticleContainer,
    CelllistContainer
  };

  /**
   * @brief Create an instance from the underlying enum value.
   *
   * @param v A enum value.
   */
  ContainerType (Value v);

  /**
   * @brief Create an instance from a C string.
   *
   * @param v A string value.
   */
  ContainerType (const char* v);

  /**
   * @brief Create an instance from a string.
   *
   * @param v A string value.
   */
  ContainerType (const ::std::string& v);

  /**
   * @brief Create an instance from the base value.
   *
   * @param v A base value.
   */
  ContainerType (const ::xml_schema::String& v);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ContainerType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a DOM attribute.
   *
   * @param a A DOM attribute to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ContainerType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Create an instance from a string fragment.
   *
   * @param s A string fragment to extract the data from.
   * @param e A pointer to DOM element containing the string fragment.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  ContainerType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  ContainerType (const ContainerType& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual ContainerType*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Assign the underlying enum value.
   *
   * @param v A enum value.
   * @return A refernce to the instance.
   */
  ContainerType&
  operator= (Value v);

  /**
   * @brief Implicit conversion operator to the underlying
   * enum value.
   *
   * @return A enum value.
   */
  virtual
  operator Value () const
  {
    return _xsd_ContainerType_convert ();
  }

  //@cond

  protected:
  Value
  _xsd_ContainerType_convert () const;

  public:
  static const char* const _xsd_ContainerType_literals_[2];
  static const Value _xsd_ContainerType_indexes_[2];

  //@endcond
};

/**
 * @brief Class corresponding to the %floatVector schema type.
 *
 * @nosubgrouping
 */
class FloatVector: public ::xml_schema::Type
{
  public:
  /**
   * @name x0
   *
   * @brief Accessor and modifier functions for the %x0
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Double X0Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X0Type, char, ::xsd::cxx::tree::schema_type::double_ > X0Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X0Type&
  x0 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X0Type&
  x0 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x0 (const X0Type& x);

  //@}

  /**
   * @name x1
   *
   * @brief Accessor and modifier functions for the %x1
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Double X1Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X1Type, char, ::xsd::cxx::tree::schema_type::double_ > X1Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X1Type&
  x1 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X1Type&
  x1 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x1 (const X1Type& x);

  //@}

  /**
   * @name x2
   *
   * @brief Accessor and modifier functions for the %x2
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Double X2Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X2Type, char, ::xsd::cxx::tree::schema_type::double_ > X2Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X2Type&
  x2 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X2Type&
  x2 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x2 (const X2Type& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  FloatVector (const X0Type&,
               const X1Type&,
               const X2Type&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  FloatVector (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FloatVector (const FloatVector& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual FloatVector*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~FloatVector ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< X0Type > x0_;
  ::xsd::cxx::tree::one< X1Type > x1_;
  ::xsd::cxx::tree::one< X2Type > x2_;

  //@endcond
};

/**
 * @brief Class corresponding to the %intVector schema type.
 *
 * @nosubgrouping
 */
class IntVector: public ::xml_schema::Type
{
  public:
  /**
   * @name x0
   *
   * @brief Accessor and modifier functions for the %x0
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Int X0Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X0Type, char > X0Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X0Type&
  x0 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X0Type&
  x0 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x0 (const X0Type& x);

  //@}

  /**
   * @name x1
   *
   * @brief Accessor and modifier functions for the %x1
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Int X1Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X1Type, char > X1Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X1Type&
  x1 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X1Type&
  x1 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x1 (const X1Type& x);

  //@}

  /**
   * @name x2
   *
   * @brief Accessor and modifier functions for the %x2
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Int X2Type;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< X2Type, char > X2Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const X2Type&
  x2 () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  X2Type&
  x2 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  x2 (const X2Type& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  IntVector (const X0Type&,
             const X1Type&,
             const X2Type&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  IntVector (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  IntVector (const IntVector& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual IntVector*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~IntVector ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< X0Type > x0_;
  ::xsd::cxx::tree::one< X1Type > x1_;
  ::xsd::cxx::tree::one< X2Type > x2_;

  //@endcond
};

/**
 * @brief Class corresponding to the %cuboid schema type.
 *
 * @nosubgrouping
 */
class Cuboid: public ::xml_schema::Type
{
  public:
  /**
   * @name bottomLeft
   *
   * @brief Accessor and modifier functions for the %bottomLeft
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::FloatVector BottomLeftType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< BottomLeftType, char > BottomLeftTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const BottomLeftType&
  bottomLeft () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  BottomLeftType&
  bottomLeft ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  bottomLeft (const BottomLeftType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  bottomLeft (::std::auto_ptr< BottomLeftType > p);

  //@}

  /**
   * @name nX
   *
   * @brief Accessor and modifier functions for the %nX
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::IntVector NXType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< NXType, char > NXTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const NXType&
  nX () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  NXType&
  nX ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  nX (const NXType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  nX (::std::auto_ptr< NXType > p);

  //@}

  /**
   * @name stepWidth
   *
   * @brief Accessor and modifier functions for the %stepWidth
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double StepWidthType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< StepWidthType, char, ::xsd::cxx::tree::schema_type::double_ > StepWidthTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const StepWidthType&
  stepWidth () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  StepWidthType&
  stepWidth ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  stepWidth (const StepWidthType& x);

  //@}

  /**
   * @name mass
   *
   * @brief Accessor and modifier functions for the %mass
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double MassType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< MassType, char, ::xsd::cxx::tree::schema_type::double_ > MassTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const MassType&
  mass () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  MassType&
  mass ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  mass (const MassType& x);

  //@}

  /**
   * @name type
   *
   * @brief Accessor and modifier functions for the %type
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Int TypeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const TypeType&
  type () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  TypeType&
  type ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  type (const TypeType& x);

  //@}

  /**
   * @name initialVelocity
   *
   * @brief Accessor and modifier functions for the %initialVelocity
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::FloatVector InitialVelocityType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< InitialVelocityType, char > InitialVelocityTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const InitialVelocityType&
  initialVelocity () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  InitialVelocityType&
  initialVelocity ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  initialVelocity (const InitialVelocityType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  initialVelocity (::std::auto_ptr< InitialVelocityType > p);

  //@}

  /**
   * @name brownianMeanVelocity
   *
   * @brief Accessor and modifier functions for the %brownianMeanVelocity
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double BrownianMeanVelocityType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< BrownianMeanVelocityType, char, ::xsd::cxx::tree::schema_type::double_ > BrownianMeanVelocityTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const BrownianMeanVelocityType&
  brownianMeanVelocity () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  BrownianMeanVelocityType&
  brownianMeanVelocity ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  brownianMeanVelocity (const BrownianMeanVelocityType& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Cuboid (const BottomLeftType&,
          const NXType&,
          const StepWidthType&,
          const MassType&,
          const TypeType&,
          const InitialVelocityType&,
          const BrownianMeanVelocityType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (auto_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  Cuboid (::std::auto_ptr< BottomLeftType >&,
          ::std::auto_ptr< NXType >&,
          const StepWidthType&,
          const MassType&,
          const TypeType&,
          ::std::auto_ptr< InitialVelocityType >&,
          const BrownianMeanVelocityType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Cuboid (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Cuboid (const Cuboid& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Cuboid*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~Cuboid ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< BottomLeftType > bottomLeft_;
  ::xsd::cxx::tree::one< NXType > nX_;
  ::xsd::cxx::tree::one< StepWidthType > stepWidth_;
  ::xsd::cxx::tree::one< MassType > mass_;
  ::xsd::cxx::tree::one< TypeType > type_;
  ::xsd::cxx::tree::one< InitialVelocityType > initialVelocity_;
  ::xsd::cxx::tree::one< BrownianMeanVelocityType > brownianMeanVelocity_;

  //@endcond
};

/**
 * @brief Class corresponding to the %generator schema type.
 *
 * @nosubgrouping
 */
class Generator: public ::xml_schema::Type
{
  public:
  /**
   * @name cuboid
   *
   * @brief Accessor and modifier functions for the %cuboid
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Cuboid CuboidType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< CuboidType > CuboidSequence;

  /**
   * @brief Element iterator type.
   */
  typedef CuboidSequence::iterator CuboidIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef CuboidSequence::const_iterator CuboidConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< CuboidType, char > CuboidTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const CuboidSequence&
  cuboid () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  CuboidSequence&
  cuboid ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  cuboid (const CuboidSequence& s);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  Generator ();

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  Generator (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  Generator (const Generator& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual Generator*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~Generator ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  CuboidSequence cuboid_;

  //@endcond
};

/**
 * @brief Class corresponding to the %simulationConfig schema type.
 *
 * @nosubgrouping
 */
class SimulationConfig: public ::xml_schema::Type
{
  public:
  /**
   * @name deltaT
   *
   * @brief Accessor and modifier functions for the %deltaT
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double DeltaTType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< DeltaTType, char, ::xsd::cxx::tree::schema_type::double_ > DeltaTTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const DeltaTType&
  deltaT () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  DeltaTType&
  deltaT ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  deltaT (const DeltaTType& x);

  //@}

  /**
   * @name endTime
   *
   * @brief Accessor and modifier functions for the %endTime
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double EndTimeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< EndTimeType, char, ::xsd::cxx::tree::schema_type::double_ > EndTimeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const EndTimeType&
  endTime () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  EndTimeType&
  endTime ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  endTime (const EndTimeType& x);

  //@}

  /**
   * @name scenarioType
   *
   * @brief Accessor and modifier functions for the %scenarioType
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::ScenarioType ScenarioTypeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< ScenarioTypeType, char > ScenarioTypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const ScenarioTypeType&
  scenarioType () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  ScenarioTypeType&
  scenarioType ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  scenarioType (const ScenarioTypeType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  scenarioType (::std::auto_ptr< ScenarioTypeType > p);

  //@}

  /**
   * @name domainSize
   *
   * @brief Accessor and modifier functions for the %domainSize
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::FloatVector DomainSizeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< DomainSizeType, char > DomainSizeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const DomainSizeType&
  domainSize () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  DomainSizeType&
  domainSize ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  domainSize (const DomainSizeType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  domainSize (::std::auto_ptr< DomainSizeType > p);

  //@}

  /**
   * @name boundaryCondition
   *
   * @brief Accessor and modifier functions for the %boundaryCondition
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::BoundaryConditionType BoundaryConditionType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< BoundaryConditionType, char > BoundaryConditionTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const BoundaryConditionType&
  boundaryCondition () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  BoundaryConditionType&
  boundaryCondition ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  boundaryCondition (const BoundaryConditionType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  boundaryCondition (::std::auto_ptr< BoundaryConditionType > p);

  //@}

  /**
   * @name containerType
   *
   * @brief Accessor and modifier functions for the %containerType
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::ContainerType ContainerTypeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< ContainerTypeType, char > ContainerTypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const ContainerTypeType&
  containerType () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  ContainerTypeType&
  containerType ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  containerType (const ContainerTypeType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  containerType (::std::auto_ptr< ContainerTypeType > p);

  //@}

  /**
   * @name epsilon
   *
   * @brief Accessor and modifier functions for the %epsilon
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double EpsilonType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< EpsilonType, char, ::xsd::cxx::tree::schema_type::double_ > EpsilonTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const EpsilonType&
  epsilon () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  EpsilonType&
  epsilon ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  epsilon (const EpsilonType& x);

  //@}

  /**
   * @name sigma
   *
   * @brief Accessor and modifier functions for the %sigma
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Double SigmaType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< SigmaType, char, ::xsd::cxx::tree::schema_type::double_ > SigmaTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const SigmaType&
  sigma () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  SigmaType&
  sigma ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  sigma (const SigmaType& x);

  //@}

  /**
   * @name outputFrequency
   *
   * @brief Accessor and modifier functions for the %outputFrequency
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Int OutputFrequencyType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< OutputFrequencyType, char > OutputFrequencyTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const OutputFrequencyType&
  outputFrequency () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  OutputFrequencyType&
  outputFrequency ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  outputFrequency (const OutputFrequencyType& x);

  //@}

  /**
   * @name disableOutput
   *
   * @brief Accessor and modifier functions for the %disableOutput
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::Boolean DisableOutputType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisableOutputType, char > DisableOutputTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const DisableOutputType&
  disableOutput () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  DisableOutputType&
  disableOutput ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  disableOutput (const DisableOutputType& x);

  //@}

  /**
   * @name loggerConfigFile
   *
   * @brief Accessor and modifier functions for the %loggerConfigFile
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::String LoggerConfigFileType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< LoggerConfigFileType, char > LoggerConfigFileTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const LoggerConfigFileType&
  loggerConfigFile () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  LoggerConfigFileType&
  loggerConfigFile ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  loggerConfigFile (const LoggerConfigFileType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  loggerConfigFile (::std::auto_ptr< LoggerConfigFileType > p);

  //@}

  /**
   * @name outputFilePrefix
   *
   * @brief Accessor and modifier functions for the %outputFilePrefix
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::String OutputFilePrefixType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< OutputFilePrefixType, char > OutputFilePrefixTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const OutputFilePrefixType&
  outputFilePrefix () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  OutputFilePrefixType&
  outputFilePrefix ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  outputFilePrefix (const OutputFilePrefixType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  outputFilePrefix (::std::auto_ptr< OutputFilePrefixType > p);

  //@}

  /**
   * @name outputFileType
   *
   * @brief Accessor and modifier functions for the %outputFileType
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::OutputFileType OutputFileTypeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< OutputFileTypeType, char > OutputFileTypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const OutputFileTypeType&
  outputFileType () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  OutputFileTypeType&
  outputFileType ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  outputFileType (const OutputFileTypeType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  outputFileType (::std::auto_ptr< OutputFileTypeType > p);

  //@}

  /**
   * @name inputFile
   *
   * @brief Accessor and modifier functions for the %inputFile
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::xml_schema::String InputFileType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< InputFileType, char > InputFileTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const InputFileType&
  inputFile () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  InputFileType&
  inputFile ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  inputFile (const InputFileType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  inputFile (::std::auto_ptr< InputFileType > p);

  //@}

  /**
   * @name generator
   *
   * @brief Accessor and modifier functions for the %generator
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Generator GeneratorType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< GeneratorType, char > GeneratorTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const GeneratorType&
  generator () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  GeneratorType&
  generator ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  generator (const GeneratorType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  generator (::std::auto_ptr< GeneratorType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  SimulationConfig (const DeltaTType&,
                    const EndTimeType&,
                    const ScenarioTypeType&,
                    const DomainSizeType&,
                    const BoundaryConditionType&,
                    const ContainerTypeType&,
                    const EpsilonType&,
                    const SigmaType&,
                    const OutputFrequencyType&,
                    const DisableOutputType&,
                    const LoggerConfigFileType&,
                    const OutputFilePrefixType&,
                    const OutputFileTypeType&,
                    const InputFileType&,
                    const GeneratorType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (auto_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  SimulationConfig (const DeltaTType&,
                    const EndTimeType&,
                    const ScenarioTypeType&,
                    ::std::auto_ptr< DomainSizeType >&,
                    const BoundaryConditionType&,
                    const ContainerTypeType&,
                    const EpsilonType&,
                    const SigmaType&,
                    const OutputFrequencyType&,
                    const DisableOutputType&,
                    const LoggerConfigFileType&,
                    const OutputFilePrefixType&,
                    const OutputFileTypeType&,
                    const InputFileType&,
                    ::std::auto_ptr< GeneratorType >&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  SimulationConfig (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  SimulationConfig (const SimulationConfig& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual SimulationConfig*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~SimulationConfig ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< DeltaTType > deltaT_;
  ::xsd::cxx::tree::one< EndTimeType > endTime_;
  ::xsd::cxx::tree::one< ScenarioTypeType > scenarioType_;
  ::xsd::cxx::tree::one< DomainSizeType > domainSize_;
  ::xsd::cxx::tree::one< BoundaryConditionType > boundaryCondition_;
  ::xsd::cxx::tree::one< ContainerTypeType > containerType_;
  ::xsd::cxx::tree::one< EpsilonType > epsilon_;
  ::xsd::cxx::tree::one< SigmaType > sigma_;
  ::xsd::cxx::tree::one< OutputFrequencyType > outputFrequency_;
  ::xsd::cxx::tree::one< DisableOutputType > disableOutput_;
  ::xsd::cxx::tree::one< LoggerConfigFileType > loggerConfigFile_;
  ::xsd::cxx::tree::one< OutputFilePrefixType > outputFilePrefix_;
  ::xsd::cxx::tree::one< OutputFileTypeType > outputFileType_;
  ::xsd::cxx::tree::one< InputFileType > inputFile_;
  ::xsd::cxx::tree::one< GeneratorType > generator_;

  //@endcond
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

/**
 * @name Parsing functions for the %simulationConfig document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::auto_ptr< ::SimulationConfig >
simulationConfig (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

//@}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMULATION_CONFIG_H
